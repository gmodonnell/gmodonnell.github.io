Generally you get user before you get root.
The path from user to root is privesc.
Fortunately, there are a lot of ways to escalate
so it's easy. Unfortunately there are a lot
of ways to escalate so enumerating through all of 
them can be a pain in the ass. 

ENUMERATION OF PRIVESC PATHWAYS:
Manual Methods:
- User Enum:
    whoami, net user, groups, id,
    cat /etc/passwd
- Hostnames:
    hostname
- OSVA:
    uname -a,
    systeminfo | findstr /B /C:"OS Name" /C:"OS Version" /C:"System Type"
    cat /etc/issue
    cat /etc/*-release
- Running Processes:
    tasklist /svc, ps axu, ss -anlp, netstat -antpo
    Get-WmiObject win32_service | Select-Object Name, State, PathName | Where-Object {$_.State -like 'Running'}
- Networking Info:
    ipconfig /all
    route print
    netstat -antpo 
    ip a 
    /sbin/route || /sbin/routel
- Firewall Status and Rules:
    netsh advfirewall show currentprofile 
    netsh advfirewall firewall show rule name=all 
- Secheduled Tasks:
    schtasks /query /fo LIST /v 
    ls -lah /etc/cron*
    cat /etc/crontab 
- Installed Applications and Patch Levels
    wmic product get name, version, vendor, state, startmode (Windows)
    wmic qfe get Caption, Description, HotFixID, InstalledOn
    dpkg -l
- Readable/Writable Files and Dirs
    accesschk.exe -uws "Everyone" "C:\Program Files" 
    Get-ChildItem "C:\Program Files" -Recurse | Get-ACL | ?{$_.AccessToString -match "Everyone\sAllow\s\sModify"}
    find / -writable -type d 2>/dev/null
- Unmounted Disks
    mountvol
    cat /etc/fstab (Shows all drives mounted at boot)
    mount 
    /bin/lsblk (all avail disks)
- Device Drivers and Kernel Modules
    driverquery.exe /v /fo csv | ConvertFrom-CSV | Select-Object ‘Display Name’, ‘Start Mode’, Path
    Get-WmiObject Win32_PnPSignedDriver | Select-Object DeviceName, DriverVersion, Manufacturer | Where-Object {$_.DeviceName -like "*VMware*"}
    lsmod (Kernel Modules on Linux)
    /sbin/modinfo libata
- AutoElevating Binaries
    reg query HKEY_CURRENT_USER\Software\Policies\Microsoft\Windows\Installer
    reg query HKEY_LOCAL_MACHINE\Software\Policies\Microsoft\Windows\Installer
    find / -perm -u=s -type f 2>/dev/null (suid capable bins)

There are some automated tools which are fun too:
LinPEAS and WinPEAS (Duh)
Seatbelt: https://github.com/GhostPack/Seatbelt
WindowsPECheck: https://github.com/pentestmonkey/windows-privesc-check
UnixPECheck: http://pentestmonkey.net/tools/audit/unix-privesc-check

WINDOWS PRIVESC TECHS:
Windows manages privs by using access tokens to control what each 
user can do. SIDs are assigned to each object, including tokens. 
Windows Local Security Authority manages these tokens. There are 
4 integrity levels that processes can run on in a Windows env.
These have been defined since Vista:

System: SYSTEM Rights
High: Admin
Medium: Standard User
Low: Restricted/Sandboxed Procs 

User Account Control (UAC): Is not a security boundary according to M$. 
UAC forces applications to run as Med Access until they are elevated 
manually by the user. The theory is that any proc trying to run as 
admin or higher can't do it quietly. UAC can ask for consent or creds. 
If you don't have admin, you will have to give admin creds. If you have 
admin, you just need to click yes/no.

whoami /groups will show priv levels. 

Start ps as admin (if logged in as admin):
powershell.exe Start-Process cmd.exe -Verb runAs

Set Password:
net user <user> <newpass>

MOST UAC BYPASS TECHS rely on specific OS build #s so enum and research.

Check the Application Manifest:
C:\> cd C:\Tools\privilege_escalation\SysinternalsSuite
C:\Tools\privilege_escalation\SysinternalsSuite> sigcheck.exe -a -m C:\Windows\System32\fodhelper.exe
The appmanifest is an XML file that tells the OS how to handle a file when
it's started. In the above example, the file has AutoElevate set to true. 

procmon.exe (Process Manager) is another way to get information regarding
binaries we run on Windows machines.

icacls "C:\Program Files\Serviio\bin\ServiioService.exe"
icacls will enum privs of a service.

shutdown /r /t 0 (immediate restart)

Unquoted Service Paths:
If you have write permissions to a service's main directory and subdirs 
but you can't replace the files inside, you can run this exploit. 
If a bin is in C:\Program Files, the devs have to make sure there are 
quotes in the filepath when you reference it. Otherwise, the system 
can let the user redirect the call. For example, if you have a service in
C:\Program Files\My Program\My Service\service.exe and the service path is
unquoted, the system will try to run all the following files:
C:\Program.exe
C:\Program Files\My.exe
C:\Program Files\My Program\My.exe
C:\Program Files\My Program\My service\service.exe
All you have to do is write an executable and put it in one of the 
attempted paths and it will run first. 